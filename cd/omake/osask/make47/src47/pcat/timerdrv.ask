/*	"timerdrv.aska"
	OSASK/AT용의 타이머 루틴(type-A ver.  1.3)
	Copyright(C) 2004 카와이 히데미(川合堂)		*/

//	낡은 칩 세트에는 대응하고 있지 않다. 왜냐하면 연속 액세스 시에 WAIT가 들어가 있지 않으니까.

#include "osaskinc.ask"

segment CODE(USE32, PARA);
default(code == CODE);

#define	DEBUG		1

//	#define QEMU		1

struct SS0_struct {
	void [32];
	char ring0_count, [3];
	/* void * */ int [4], ring0call[6], [2];
	char cli_count, [3];
	/* void * */ int [4], cli_call[6], [2];
};

struct TimerNode {
	int signalbuf[32]; // 타이머 시그널은 보통보다 작다
	int call_vector[8];
	int time[12], interval;
	// int near *back, near *next;
	int back, next;
	// 이것으로 정확히 64bytes.
};

struct TimerWork {
	int jmpvec; // 사용하지 않았다(timer type-B의 자취)
	int longcounter; // 나머지 대기 시간(몇회의 인터럽트를 대기하고 있는것인가)
	int predict_PIT1_count /* 타임 아웃 했을 때의 값 */; // 사용하지 않았다
	char status, [3];

	// origin(0x0010)

	// 이하 모두 사용하지 않았다
	unsigned int PIT1_count0 /* 설정치 */;
	unsigned int PIT1_delta_100000000, PIT1_delta_10000, PIT1_delta_fffeffff /* 각각 얼마나 줄어드는지를 나타낸 것 */;
	signed int PIT1_delta_max, PIT1_delta_min /* PIT1_count0 / 2, - PIT1_count0 / 2 */;
	int limit /* 선행 실행 한계치 */;

	void [20];
	void [192];

	// origin(0x0100)

	TimerNode head, last, timeout, freenode[3200 /* 50 * sizeof (TimerNode) */];
};

void calc_count1ms();

void far TimerSysCmd()
// FS:EBX로부터 커맨드
{
	PUSH(DS);
	ESP -= 24;
	[SS:ESP +  0] = EAX;
	MOV(EAX, CS);
	[SS:ESP +  4] = ECX;
	EAX += 8;
	[SS:ESP +  8] = EDX;
	DS = AX;
	EAX = [FS:EBX]; // 4의 배수
	[SS:ESP + 12] = EBP;
	[SS:ESP + 16] = ESI;
	[SS:ESP + 20] = EDI;
	if (EAX ! = 4)
		asmout("JMP DWORD PTR DS:[TimerSC_JmpTbl+EAX]");
	asmout("JMP TimerSC_Special");
}

void far TimerInt()
{
	TimerWork *work == DS:0x0000;
	unsigned short PIC_mastar_OCW2 == 0x0020;

	PUSH(DS);
	PUSH(EAX);
	MOV(EAX, CS);
	EAX += 8;
	DS = AX;

	// 예외없이 인터럽트는 곧바로 종료
	AL = 0x60 /* IRQ-00을 종료 */;
	OUT(PIC_mastar_OCW2, AL);

	// 현재 시각의 산출 방법 : head.time - 나머지 카운트

	// 나머지 카운트의 산출 방법 : (longcounter - 1) * 0x10000 + PIT0의 카운트
	// (큰 수나 0 때는, IRQ0가 와 있는지에 따라 longcounter를 작게 해 줄 필요가 있을지도 모른다)
	// 0으로 IRQ가 와 있지 않았으면... 이런 일은 있을 수 없다. 반드시 와 있다. 하지만, longcount는 줄여선 안 된다.

	// 다만, 보정이 필요. ...보정이라고 할지, 이 시각에 대응하는 PIT1의 카운트를 산출해 둔다.



	// 더욱이 고속화 가능 ...short_wait에서도 일부러 longcounter를 1로 해 둔다.
	// 인터럽트를 캔슬하는 루틴은 status를 본다. 0이라면 long, 1이라면 short.
	// 2라면 인터럽트 처리 중.
}

/*	기본은 32bit 버전. 확실히 2^32카운트에 한 번, 시각 보정 인터럽트가 일어나기 때문에
	문제는 없다. 덧붙여서, 이 인터럽트는 1시간에 1번이다. 좀 더 설명하자면
	시각 보정 인터럽트란 아무것도 하지 않는 인터럽트이다. ···아니, 다른
	시각 보정 인터럽트는 2^(32+16) 카운트에 한 번이다. 이것은 7년에 한 번.

	타임 아웃 하자, 곧바로 현재 시각이 갱신되어 인터벌도 조절된다.
	이 상태가 되면, 공통 루틴으로 들어간다(인터럽트, 비인터럽트).
*/

/*	이 버전에서는 인터럽트를 금지한 채로 차례차례로 처리해 나가지만,
	그렇지 않은 버전을 만들 수도 있을 것이다. 그러나 어느 쪽이 바람직한가는 모른다.
*/

void TimerRegister();

void TimerLongcount()
{
	TimerWork *work == DS:0x0000;

	work->longcounter--;
	/* (true) */ if (! = 0) {
		POP(EAX);
		POP(DS);
		IRETD();
	}
	// goto TimerCountout;
}

void TimerCountout()
//	여기에 오면 CLI기간이 꽤 길어지므로, IRQ-00을 mask 하여
//	인터럽트 종료를 해 버리는 편이 좋을지도 모른다.
//	그러나 노드를 연결해 바꾸고 있을 때 다른 인터럽트가 발생하여
//	그 녀석이 타이머를 설정하게 되면 곤란하다.

//	그 때문에 접속 대기군을 체인으로 연결해 둘까?
//	체인이 아니고 32엔트리만한 스택이 있으면 좋을 것이다.
//	이 생각(案)은 상당히 좋을지도.

//	키보드도 시그널을 내야한다는 것을 알면, 그러한 편이 좋을 것이다.

//	아니, 역시 하지 않아도 아무렇지도 않은가? 음, 괴롭다.

//	최종안：mask는 하지 않는다. 하지 않아 좋은 것 같아서 마지막에는 mode0으로 하게 되어 있다.
//	TimerNode를 새로 붙일 때는 IF = 0이 되어 있지만, 그것이 끝나면 IF = 1이 된다.

//	인터럽트의 캔슬을 할 수 없기 때문에, 반대로 대기 시간 1로 곧바로 확실히 인터럽트하게 된다.
//	이 때문에, 타임 아웃 체크 루틴은 인 라인으로 짜넣는다
{
	TimerWork *work == DS:0x0000;
	SS0_struct *ss0 == /* SS:(- sizeof (SS0_struct)) */ SS:0xffffffc0;

	asmout("#work_head EQU 256");
	asmout("#work_timeout EQU 384");

	asmout("#TN_call_vector EQU 32");
	asmout("#TN_back EQU 56");
	asmout("#TN_next EQU 60");

	PUSHAD();


//	타임 아웃군의 존재를 체크.
//	work->head.interval가 正이라면 EBX를 더한다
//	그 후로 그 노드를 떼어내어 플라잉 타임 아웃 루틴에
//	work->head.interval까지도 타임 아웃 해 버리면, 이것도 플라잉 타임 아웃의 말미에 가세한다

	TimerNode *tnode == DS:ESI, *tnext == DS:EDI, *tback == DS:EBX;

check_timeout:
	EAX = work->head.interval;
	EBX = 0;
	for (;;) {
		/* (false) */ if ((signed) EAX < 0) {
			// 인터럽트 예정 시각 - 현재 시각 = 남은 시간
			(offset) tnode = work->head.next;
			EAX = tnode->time[0];
			ECX = tnode->time[4];
			EAX -= work->head.time[0];
			EDX = tnode->time[8];
			/* ECX -= work->head.time[4] + CF */ SBB(ECX, work->head.time[4]);
			/* EDX -= work->head.time[8] + CF */ SBB(EDX, work->head.time[8]);
		//	work->head.interval = EAX;
			ECX |= EDX;
			if (! = 0)
				goto to_invalid;
			if ((signed) EAX > 0)
				break;
	to_invalid:
		//	work->head.interval = 0x90000000;
			EAX = 0x90000000;
			break;
		}
		EAX -= EBX;
		asmout("JO #to_invalid");
	//	work->head.interval = EAX;
		if ((signed) EAX > 0)
			break;
		// 타임 아웃
		(offset) tnode = work->head.next;
		(offset) tback = work->timeout.back;
		(offset) tnext = tnode->next;
		work->timeout.back = (offset) tnode;
		work->head.next = (offset) tnext;
		/* tnode->next = (offset) &(work->timeout) */ asmout("MOV DWORD PTR DS:[ESI+#TN_next], #work_timeout");
		tnode->back = (offset) tback;
		/* tnext->back = (offset) &(work->head) */ asmout("MOV DWORD PTR DS:[EDI+#TN_back], #work_head");
		tback->next = (offset) tnode;
		EBX = EAX;
		EAX = tnode->interval;
		EBX =- EBX;
	//	떼어내어 타임 아웃 체인에 접속
	//	그리고 負가 된 EAX를 EBX = - EAX;로 하고,
	//	EAX에 새로운 work->head.interval를 로드하여 루프에 돌입한다.
	}

	(offset) tnode = work->timeout.next;
	work->head.interval = EAX;
	asmout("CMP ESI, #work_timeout");
	if (! =)
		goto exec3;

	if ((signed) EAX < 0)
		goto invalid_inverval;
		// 이 때, 0 x80000000 이상의 대기 시간이 있는 것을 가정해도 좋다···long32나 max_wait
		// max_wait로부터 직접 32 bit-interval 모드로 이행할 것은 없다. 반드시, long32를 경유한다
		// 이렇게 하는 것으로, 코드를 컴팩트하게 할 수 있다
short_wait:

//	EAX만 기다린다.

	work->longcounter = EAX;
	ECX = 0;
//	TimerNode *tnode == DS:ESI;
	(offset) tnode = work->head.next;
	work->head.interval = ECX; // ECX == 0
	CMP(CL /* == 0 */, work->status);
	EDX = tnode->time[8];
	EAX = tnode->time[0];
	ECX = tnode->time[4];
	work->head.time[8] = EDX;
	work->head.time[0] = EAX;
	work->head.time[4] = ECX;
	if (! = 0)
		goto check_nesting;
	POPAD();
	POP(EAX);
	POP(DS);
	IRETD();

check_nesting:
	work->status = 0 /* 통상 인터럽트 대기 중(현재 시각은 무효) */;

	ss0->cli_count--; // 인터럽트 루틴의 기본
	if (== 0) goto call_clicall;
	POPAD();
	POP(EAX);
	POP(DS);
	ss0->ring0_count--;
	if (== 0) goto call_ring0call;
	IRETD();

call_clicall:
	/* (ss0->clicall)() */ asmout("CALL FAR DWORD SS:[0FFFFFFC0H+038H]");
	POPAD();
	POP(EAX);
	POP(DS);
	ss0->ring0_count--;
	if (== 0) goto call_ring0call;
	IRETD();

call_ring0call:
	/* (ss0->ring0call)() */ jmp_system_count0();
//	IRETD();

exec3: // 플라잉 타임 아웃용 합류 지점

	if (work->status == 0) {
		work->status = 1 /* 타임 아웃 처리중(현재 시각은 유효) */;

		ss0->ring0_count++; // 인터럽트 루틴의 기본
		ss0->cli_count++; // (이것을 했는지 여부는 work->status ! = 0인가로 밝혀진다)
	}
	// 인터럽트 가능 기간 중에는 타이머 체인을 연결하여 바꾸어도 된다.
	// 인터럽트 시그널은 체인을 끊고 나서 인터럽트를 허가하고,
	// 그 후에 콜 된다.

	// 타임 아웃 체인으로부터 1개를 꺼낸다.
/	(offset) tnode = work->timeout.next;
	(offset) tnext = tnode->next;
	(char) tnode->back = 1; // 이 노드는 시각이 세트 되고 있어 타임 아웃됨(떼어내졌다)
	work->timeout.next = (offset) tnext;
	/* tnext->back = (offset) &(work->timeout) */ asmout("MOV DWORD PTR DS:[EDI+#TN_back], #work_timeout");
//	STI(); // 2000/05/24 인터럽트 처리 중은 일관하게 CLI해 두게 되었다.
	asmout("CALL FAR DWORD DS:[ESI+#TN_call_vector]");
//	CLI();
	if (CF ! = 0 /* 연속 인터럽트 요구 */) {
		// CF를 1으로 한다면 ESI를 파괴해서는 안 된다

		// 노드를 갱신하고 등록···등록 루틴은,
		// head 다음의 노드에 연결하는 일이 있었는지를 체크할 수 있지만
		// 마음대로 TimerExecute를 부르거나는 하지 않는다
		EAX += tnode->time[0];
		ADC(ECX, tnode->time[4]);
		tnode->time[0] = EAX;
		ADC(EDX, tnode->time[8]);
		tnode->time[4] = ECX;
		tnode->time[8] = EDX;
		TimerRegister(); // ESI, EDX:ECX:EAX에 시각. 이것이 call될 때 현재 시각은 유효.
	}

//	타임 아웃군의 존재를 체크.
//	work->head.interval가 正이라면 ESI를 추가한다
//	그 후로, 그 노드를 떼어내어 플라잉 타임 아웃 루틴에
//	work->head.interval까지도 타임 아웃 해 버리면 이것도 플라잉 타임 아웃의 말미에 추가된다

	goto check_timeout;

invalid_inverval:
	// 이 때 0x80000000 이상의 대기 시간이 있는 것을 가정해도 좋다···long32나 max_wait
	(offset) tnode = work->head.next;
	EAX = tnode->time[0];
	ECX = tnode->time[4];
	EAX -= work->head.time[0];
	EDX = tnode->time[8];
	SBB(ECX, work->head.time[4]);
	SBB(EDX, work->head.time[8]);
	if (! = 0)
		goto long32_wait;
	if (ECX == 0)
		goto short_wait;

long32_wait:
	EAX -= 0xffffffff;
	SBB(ECX, 0);
	SBB(EDX, 0);
	EBX = 0x90000000;
	work->longcounter = 0xffffffff;
	if (== 0) {
		if (ECX == 0) {
			if ((signed) EAX > 0)
				EBX = EAX;
		}
	}
	EAX = 0;
	work->head.interval = EBX;
	work->head.time[0] += 0xffffffff;
	ADC(work->head.time[4], EAX);
	ADC(work->head.time[8], EAX);
	if (work->status ! = 0)
		goto check_nesting;
	POPAD();
	POP(EAX);
	POP(DS);
	IRETD();
}

void GetTimeAndFixZero();
void GetNowTime();

void TimerRegister0()
// EDX:ECX:EAX의 로드
{
	TimerNode *tnode == DS:ESI;
	EAX = tnode->time[0];
	ECX = tnode->time[4];
	EDX = tnode->time[8];
}

void TimerRegister()
// ESI, EDX:ECX:EAX 에 시각. 이것이 call될 때 현재 시각은 유효.
// 인터럽트를 금지해 둘 것.
{
	asmout("#work_timeout EQU 384");
	asmout("#TN_next EQU 60");

	TimerWork *work == DS:0x0000;
	TimerNode *tnode == DS:ESI, *tnext == DS:EDI, *tback == DS:EBX;

	EAX -= work->head.time[0];
	SBB(ECX, work->head.time[4]);
	SBB(EDX, work->head.time[8]);
	/* (false) */ if ((unsigned) < 0 /* 이미 타임 아웃?  */) {
		// 정확하게는, 0에서도 타임 아웃이지만 EDX만으로는 모르기 때문에 방치한다.
		/* (false) */ if (work->status == 0) {
			EBX = ESI;
			GetTimeAndFixZero();
			ESI = EBX;
			TimerNode *tnode2 == DS:EBX;
			EAX = tnode2->time[0];
			ECX = tnode2->time[4];
			EAX -= work->head.time[0];
			EDX = tnode2->time[8];
			/* ECX -= work->head.time[4] + CF */ SBB(ECX, work->head.time[4]);
		//	work->status = 0;
			/* EDX -= work->head.time[8] + CF */ SBB(EDX, work->head.time[8]);
			if ((unsigned) >= 0 /* 타임 아웃 하지 않는다 */)
				goto entry2;
		}
		// 타임 아웃에 직접 등록
		(offset) tback = work->timeout.back;
		work->timeout.back = (offset) tnode;
		/* tnode->next = (offset) &(work->timeout) */ asmout("MOV DWORD PTR DS:[ESI+#TN_next], #work_timeout");
		tnode->back = (offset) tback;
		tback->next = (offset) tnode;
		return;
	}
entry2:
	// 여기에 올 때 EDX 상태에 의해 ZF가 세트 되고 있다. 게다가, EDX는 負는 아니다.
	ECX |= EDX;
	if (! = 0)
		goto comp_time;
	if ((signed) EAX < 0)
		goto comp_time;

	// 남은 시간은 31bit 이하.

	// CF == 0이면 뺀다.
	// CF == 1이 되면, invalid_interval의 탓인지, 단지 시간이 부족하게 되었는지의 여부이다.
	// 어느 쪽이든 그 전에 삽입해야 하는 것은 확실.

	ECX = work->head.interval; // 이것은 負가 될 수 있으므로 특별 처리.
	/* (offset) tback = &work->head */ LEA((offset) tback, (int) work->head);
	EAX -= ECX;
	(offset) tnext = work->head.next;
	/* if (OF == 1) goto comp_time; */ asmout("JO #comp_time");
	if ((signed) < 0) // unsigned로 비교하면 아래의 if는 생략 할 수 있지만 ECX가 유효한 負의 값인 경우를 취급할 수 없다
		goto insert;
	if ((signed) ECX < 0xa0000000)
		goto insert;

	do {
		(offset) tback = (offset) tnext; // 이 문장은 실행 속도를 감소하지 않는다(AGI).
		EAX -= tnext->interval;
		(offset) tnext = tnext->next;
	} while ((unsigned) >= 0);

	// time      00     02     07     11     99
	// inter     02     05     04     --     ??

insert:
	tnode->back = (offset) tback;
	tnode->next = (offset) tnext;
	ECX = tback->interval;
	tback->next = (offset) tnode;
	tnext->back = (offset) tnode;
	EAX += ECX;
	TEST(ECX, ECX);
	tback->interval = EAX;
	EAX = tnext->time[0];
	if ((signed) < 0)
		goto invalid_interval;

	// 여기는 삽입 전의 tback의 interval이 31bit로 들어가 있던 것을 의미한다.
	// 그러니까, 삽입 후의 tnode의 interval도 31bit로 들어간다.
	EAX -= tnode->time[0];
	tnode->interval = EAX;
	return;

invalid_interval:
//	EAX = tnext->time[0];
	EAX -= tnode->time[0];
	ECX = tnext->time[4];
	if ((signed) < 0)
		goto skip1;
	EDX = tnext->time[8];
	/* ECX -= tnode->time[4] + CF */ SBB(ECX, tnode->time[4]);
	/* EDX -= tnode->time[8] + CF */ SBB(EDX, tnode->time[8]);
	ECX |= EDX;
	if (== 0)
		goto skip2;
skip1:
	EAX = 0x90000000;
skip2:
	tnode->interval = EAX;
	return;

comp_time:
	// 대기 시간은, 현재 시각부터 32bit 이상.
	// 32bit이하라도 좋지만 느리다.
	/* (offset) tnext = &work->head */ LEA((offset) tnext, (int) work->head);
	EAX = tnode->time[0];
	do {
		ECX = tnode->time[4];
		CMP(EAX, tnext->time[0]);
		EDX = tnode->time[8];
		/* ECX -= tnext->time[4] + CF */ SBB(ECX, tnext->time[4]);
		(offset) tback = (offset) tnext; // 아마 이 문장은 실행 속도에 영향을 주지 않는다(플래그 stall).
		/* EDX -= tnext->time[8] + CF */ SBB(EDX, tnext->time[8]);
		(offset) tnext = tnext->next;
	} while ((unsigned) >= 0);
	// ↑이것은 EDX밖에 보지 않게 되지만, 負가 되었는지를 알고 싶기 때문에 이것으로 좋다.

//	tnode < tback < tnext 였어! (2000/05/25)
//	그러니까, 1개 돌아와야 함
	(offset) tnext = (offset) tback;
	(offset) tback = tback->back;

	EBP = 0x90000000;
//	EAX = tnode->time[0];
	tback->interval = EBP;
	EAX -= tback->time[0];
	ECX = tnode->time[4];
	if ((signed) >= 0) { 
		EDX = tnode->time[8];
		/* ECX -= tback->time[4] + CF */ SBB(ECX, tback->time[4]);
		/* EDX -= tback->time[8] + CF */ SBB(EDX, tback->time[8]);
		ECX |= EDX;
		if (== 0)
			tback->interval = EAX;
	}
	tnode->back = (offset) tback;
	tnode->next = (offset) tnext;
	tback->next = (offset) tnode;
	tnext->back = (offset) tnode;
	EAX = tnext->time[0];
	tnode->interval = EBP;
	EAX -= tnode->time[0];
	ECX = tnext->time[4];
	if ((signed) >= 0) { 
		EDX = tnext->time[8];
		/* ECX -= tnode->time[4] + CF */ SBB(ECX, tnode->time[4]);
		/* EDX -= tnode->time[8] + CF */ SBB(EDX, tnode->time[8]);
		ECX |= EDX;
		if (== 0)
			tnode->interval = EAX;
	}
	return;
}

void GetNowTime()
// work->status == 0 때 이외는 CALL하지 말 것
// CLI해 둘 것
// 현재 시각을 취득했다고 하여 인터럽트를 캔슬하지 않으면 안 된다는 것은 없다.
// EDX:ECX:EAX에 현재 시각을 돌려준다
// EDI:ESI에 나머지 카운트(반드시 正)
{
	// 나머지 카운트의 산출 방법 : (longcounter - 1) * 0x10000 + PIT0의 카운트
	// (큰 수나 0 때는 IRQ0가 와 있는지에 따라 longcounter를 작게 해 줄 필요가 있을지도 모른다)
	// 0으로 IRQ가 와 있지 않았으면···그런 일은 있을 수 없다. 반드시 와 있다. 하지만, longcount는 줄여선 안 된다.

	TimerWork *work == DS:0x0000;

	ESI = work->longcounter;
	EDI = 0;
	EAX = work->head.time[0];
	ECX = work->head.time[4];
	EAX -= ESI;
	EDX = work->head.time[8];
	/* ECX -= EDI + CF */ SBB(ECX, EDI);
	/* EDX -= CF */ SBB(EDX, EDI); 
	return;
}

void GetTimeAndFixZero()
// work->status == 0 때 이외는 CALL하지 말아라
// EDI:ESI에 나머지 카운트
// CLI 해 둘 것
// 오버 런에 대응할 수 있도록 함
// work->longcounter가 1로, 게다가 카운트 아웃 하고 있으면 보통 방법으로 현재 시각을 낸다
{
	// 나머지 카운트는 head.interval에 반영된다.
	// 이것을 하면 status는 2가 된다.

	TimerWork *work == DS:0x0000;

	ESI = work->longcounter;
	EDI = 0;
	ESI--;
	EAX = work->head.time[0];
	ECX = work->head.time[4];
	EAX -= ESI;
	EDX = work->head.time[8];
	/* ECX -= EDI + CF */ SBB(ECX, EDI);
	/* EDX -= CF */ SBB(EDX, EDI); 

	work->head.time[0] = EAX;
	work->head.time[4] = ECX;
	work->head.time[8] = EDX;
	work->status = 2;
	work->longcounter = 1;
	if ((signed) ESI < 0)
		goto interval_over;
	work->head.interval += ESI;
	if ((signed) < 0)
		goto interval_over;
//	asmout("JO #interval_over");
	return;

interval_over:
	work->head.interval = 0x90000000;
	return;
}

void CancelTimer()
// DS:ESI의 타이머를 캔슬
// CLI 해 둘 것
{
	TimerNode *tnode == DS:ESI, *tnext == DS:EDI, *tback == DS:EBX;
	// head에 연결되고 있는 한편, status == 0이라면 GetNowTime() + FixZero() 하고 나서 떼어낸다
	TEST((char) tnode->back, 0x0f);
	if (== 0) {
	//	if ((offset) tnode == work->head.next) { // 이런 건 해도 시간이 증가할 뿐이니까, 하나 하나 끼어들지 않는다.
	//		if (work->status == 0) {
	//			GetTimeAndFixZero();
	//		}
	//	}
		(offset) tback = tnode->back;
		(offset) tnext = tnode->next;
		int interval == EAX, interval2 == ECX;
		interval = tnode->interval;
		tback->next = (offset) tnext;
		tnext->back = (offset) tback;
		(char) tnode->back = 0x02; // 캔슬되었다
		interval2 = tback->interval;
		if ((signed) interval < 0)
			goto interval_over;
		if ((signed) interval2 < 0)
			goto interval_over;
		interval += interval2;
		if ((signed) < 0)
			goto interval_over;
		tback->interval = interval;
	}
	return;

interval_over:
	tback->interval = 0x90000000;
	return;
}

void far TimerSC_EOC()
// 종료 커맨드
{
	EAX = [SS:ESP +  0];
	ECX = [SS:ESP +  4];
	EDX = [SS:ESP +  8];
	EBP = [SS:ESP + 12];
	ESI = [SS:ESP + 16];
	EDI = [SS:ESP + 20];
	ESP += 24; // CF = 0;
	POP(DS);
	return;
}

void TimerSC_GetNode()
{
	asmout("#work_head EQU 256");
	asmout("#work_last EQU 320");
	asmout("#TN_back EQU 56");

	TimerWork *work == DS:0x0000;
	TimerNode *tnode == DS:ECX, *tnext == DS:EDX;
	int *cmd == FS:EBX;
	PUSHFD();
	CLI();
	(offset) tnode = work->last.next;
	EAX = cmd[8];
//	CMP((offset) tnode, (offset) &work->head);
	asmout("CMP ECX, #work_head");
	(offset) tnext = tnode->next;
	/* (false) */ if (==) {
		POPFD();
		INT(0x03);
	}
	work->last.next = (offset) tnext;
//	tnext->back = (offset) &work->last;
	asmout("MOV DWORD PTR DS:[EDX+#TN_back], #work_last");
	POPFD();
	cmd[4] = (offset) tnode; // WRITE값
	(char) tnode->back = 0x03; // 시각조차 세트되어 있지 않다
	(offset) cmd += 8;
	asmout("JMP DWORD PTR DS:[TimerSC_JmpTbl+EAX]");
}

void TimerSC_FreeNode()
{
	asmout("#work_last EQU 320");
	asmout("#TN_back EQU 56");

	TimerWork *work == DS:0x0000;
	TimerNode *tnode == DS:ECX, *tnext == DS:EDX;
	int *cmd == FS:EBX;
	(offset) tnode = cmd[4];
	EAX = cmd[8];
	EBX += 8;
	PUSHFD();
	CLI();
	(offset) tnext = work->last.next;
	work->last.next = (offset) tnode;
//	tnode->back = (offset) &work->last;
	asmout("MOV DWORD PTR DS:[ECX+#TN_back], #work_last");
	tnode->next = (offset) tnext;
	tnext->back = (offset) tnode;
	POPFD();
	asmout("JMP DWORD PTR DS:[TimerSC_JmpTbl+EAX]");
}

void TimerSC_SetNowTime()
// 현재 시각을 안다
// 인터럽트 중에 실행하면 안됨
{
	TimerWork *work == DS:0x0000;
	int *cmd == FS:EBX;

	PUSHFD();
	CLI();
	if (work->status == 0) {
		GetNowTime();
	} else {
		EAX = work->head.time[0];
		ECX = work->head.time[4];
		EDX = work->head.time[8];
	}
	POPFD();
	ESI = cmd[16];
	cmd[ 4] = EAX;
	cmd[ 8] = ECX;
	cmd[12] = EDX;
	EBX += 16;
	asmout("JMP DWORD PTR DS:[TimerSC_JmpTbl+ESI]");
}

void TimerSC_SetTimer()
{
	SS0_struct *ss0 == /* SS:(- sizeof (SS0_struct)) */ SS:0xffffffc0;
	TimerWork *work == DS:0x0000;
	TimerNode *tnode == DS:ESI;
	(offset) tnode = [FS:EBX + 4];
	PUSH(EBX);
	PUSHFD();
	CLI();
	ss0->cli_count++;
	TimerRegister0();
	work->status = 0;
	
	ss0->cli_count--;
	/* (false) */ if (== 0) {
		PUSH(DS);
		/* (ss0->clicall)() */ asmout("CALL FAR DWORD SS:[0FFFFFFC0H+038H]");
		POP(DS);
	}
	POPFD();
	POP(EBX);
	EAX = [FS:EBX + 8];
	EBX += 8;
	asmout("JMP DWORD PTR DS:[TimerSC_JmpTbl+EAX]");
}

void TimerSC_CancelTimer()
{
	SS0_struct *ss0 == /* SS:(- sizeof (SS0_struct)) */ SS:0xffffffc0;
	TimerNode *tnode == DS:ESI;
	int *cmd == FS:EBX;
	(offset) tnode = cmd[4];
EBP = EBX;	///	PUSH(EBX);
	PUSHFD();
	CLI();
///	ss0->cli_count++;
	CancelTimer();
///	ss0->cli_count--;
///	/* (false) */ if (== 0) {
///		PUSH(DS);
///		/* (ss0->clicall)() */ asmout("CALL FAR DWORD SS:[0FFFFFFC0H+038H]");
///		POP(DS);
///	}
	POPFD();
EAX = [FS:EBP + 8]; asmout("LEA EBX,[EBP+8]");	///	POP(EBX);

#if 0
TEST((char) tnode->back, 0x0f); if (== 0) INT(3);
if (ESI == 0x0340) {
	if (EDX == 0x02d0) {
		PUSH(DS);
		PUSH(SEL_IDTGDT);
		POP(DS);
		ECX = 384 + SEL_TIMERDAT;
		AL = [DS:ECX + 4];
		AH = [DS:ECX + 7];
		EAX <<= 16;
		AX = [DS:ECX + 2];
		POP(DS);
		LEA(ECX, tnode->back);
		EAX += ECX;
		asmout("MOV DR0, EAX");
		EAX = 0;
		asmout("MOV DR6, EAX");
		asmout("MOV EAX, 1000000010B+1101B*10000H");
			/* GE = G0 = 1; LEN0 = 3 (DW); RW0 = 01 (write only); */
		asmout("MOV DR7, EAX");
		EAX = tnode->back;
		tnode->back = EAX;
	}
}
#endif

///	EAX = cmd[8];
///	EBX += 8;
	asmout("JMP DWORD PTR DS:[TimerSC_JmpTbl+EAX]");
}

void TimerSC_SetNowTimeNode()
// 현재 시각을 안다
// 인터럽트 중에 실행하면 안됨
{
	TimerWork *work == DS:0x0000;
	TimerNode *tnode == DS:ESI;

	PUSHFD();
	CLI();
	if (work->status == 0) {
		GetNowTime();
	} else {
		EAX = work->head.time[0];
		ECX = work->head.time[4];
		EDX = work->head.time[8];
	}
	POPFD();
	(offset) tnode = [FS:EBX + 4];
	EDI = [FS:EBX + 8];
	EBX += 8;
	tnode->time[0] = EAX;
	tnode->time[4] = ECX;
	tnode->time[8] = EDX;
	asmout("JMP DWORD PTR DS:[TimerSC_JmpTbl+EDI]");
}

void TimerSC_AddTimeNode()
{
	TimerWork *work == DS:0x0000;
	TimerNode *tnode == DS:ESI;

	(offset) tnode = [FS:EBX +  4];
	EAX = [FS:EBX +  8];
	ECX = [FS:EBX + 12];
	EDX = [FS:EBX + 16];
	EDI = [FS:EBX + 20];
	EBX += 20;
	tnode->time[0] += EAX;
	ADC(tnode->time[4], ECX);
	ADC(tnode->time[8], EDX);
	asmout("JMP DWORD PTR DS:[TimerSC_JmpTbl+EDI]");
}

void TimerSC_SubTimeNode()
{
	TimerWork *work == DS:0x0000;
	TimerNode *tnode0 == DS:ESI, *tnode1 == DS:EDI;

	(offset) tnode1 = [FS:EBX +  8];
	(offset) tnode0 = [FS:EBX +  4];
	// tnode1 - tnode0
	EAX = tnode1->time[0];
	ECX = tnode1->time[4]; EAX -= tnode0->time[0];
	EDX = tnode1->time[8]; SBB(ECX, tnode0->time[4]);
	EDI = [FS:EBX + 24];   SBB(EDX, tnode0->time[8]);
	[FS:EBX + 12] = EAX;
	[FS:EBX + 16] = ECX;
	[FS:EBX + 20] = EDX;
	EBX += 24;
	asmout("JMP DWORD PTR DS:[TimerSC_JmpTbl+EDI]");
}

void TimerSC_SetCallVectorNode()
{
	TimerWork *work == DS:0x0000;
	TimerNode *tnode == DS:ESI;

	(offset) tnode = [FS:EBX +  4];
	EAX = [FS:EBX +  8];
	ECX = [FS:EBX + 12];
	EDI = [FS:EBX + 16];
	EBX += 16;
	tnode->call_vector[0] = EAX;
	tnode->call_vector[4] = ECX;
	asmout("JMP DWORD PTR DS:[TimerSC_JmpTbl+EDI]");
}

void TimerSC_SetMsgDataNode()
{
	TimerWork *work == DS:0x0000;
	TimerNode *tnode == DS:ESI;

	ESI = [FS:EBX +  4];
	ECX = [FS:EBX +  8];
	EBX += 12;

	#if (defined(DEBUG))
		TEST((char) tnode->back, 0x0f);
		if (== 0) {
#if 0
		//	EAX = [SS:ESP + 28];
		//	ECX = [SS:ESP + 32];

			EBX = [SS:ESP + 36 + 56 + 48 + 0]; // 1603
			EBP = [SS:ESP + 36 + 56 + 48 + 4]; // c7
			EDI = [SS:ESP + 36 + 56 + 48 + 8]; // 348
			ECX = [SS:ESP + 36 + 56 + 48 + 12]; // f
			ECX &= 0xfffffffc;
			DS = CX;

		//	EAX = [DS:EDI + 12 + 32 + 0]; // 5560 (execcmd0)
		//	ECX = [DS:EDI + 12 + 32 + 4]; // 7
			EAX = [DS:EDI + 12 + 32 + 12 + 0];
#endif
			INT(0x03);
		}
//EAX = 0;
//asmout("MOV DR7, EAX");
	#endif

	do {
		EAX = [FS:EBX];
		EBX += 4;
		[DS:ESI] = EAX;
		ESI += 4;
		ECX--;
	} while (! = 0);
	EAX = [FS:EBX];
	asmout("JMP DWORD PTR DS:[TimerSC_JmpTbl+EAX]");
}

void TimerSC_AddTimeNode2()
{
	TimerWork *work == DS:0x0000;
	TimerNode *tnode == DS:EDI;
	TimerNode *tnode2 == DS:ESI;

	(offset) tnode  = [FS:EBX +  4];
	(offset) tnode2 = [FS:EBX +  8];
	EAX = [FS:EBX + 12];
	ECX = [FS:EBX + 16];
	EAX += tnode->time[0];
	EDX = [FS:EBX + 20];
	ADC(ECX, tnode->time[4]);
	tnode2->time[0] = EAX;
	ADC(EDX, tnode->time[8]);
	EDI = [FS:EBX + 24];
	tnode2->time[4] = ECX;
	tnode2->time[8] = EDX;
	EBX += 24;
	asmout("JMP DWORD PTR DS:[TimerSC_JmpTbl+EDI]");
}

void TimerInit();

void TimerSC_Special()
{
	EAX = (int) [FS:EBX + 4]; // sub-cmd(4의 배수)
	if (EAX == 0) {
		// 초기화
		EBX += 16;
		PUSH(EBX);
		TimerInit();
		POP(EBX);
	} else if (EAX == 4) {
		// 노드 구성과 시간 단위의 제공
		// +08 : 시내 통화 지역 길이
		// +0c : far vector 에리어 오프셋(offset)(6바이트)
		// +10 : 타임 필드(12바이트)
		// +14 : reserve
		// +18 : 인터럽트 주기[sec]의 2^64배(8바이트)
		// +20 : 인터럽트 주파수[Hz]의 2^32배(8바이트)
		(int) [FS:EBX + 0x08] = 32;
		(int) [FS:EBX + 0x0c] = 32;
		(int) [FS:EBX + 0x10] = 40;
		(int) [FS:EBX + 0x14] = 0;
		#if (! defined(QEMU))
			(int) [FS:EBX + 0x18] = 0x5e572d0d;
			(int) [FS:EBX + 0x1c] = 0x004186af;
			(int) [FS:EBX + 0x20] = 0x26a0149a;
			(int) [FS:EBX + 0x24] = 1000;
		#else
			/* 분명하게 계산하고 있지 않다 */
			#if 1
				(int) [FS:EBX + 0x18] = 0x44444444;
				(int) [FS:EBX + 0x1c] = 0x04444444;
				(int) [FS:EBX + 0x20] = 0;
				(int) [FS:EBX + 0x24] = 60;
			#endif
			#if 0 /* 8 배속 설정 */
				(int) [FS:EBX + 0x18] = 0x88888888;
				(int) [FS:EBX + 0x1c] = 0x00888888;
				(int) [FS:EBX + 0x20] = 0x80000000;
				(int) [FS:EBX + 0x24] = 7;
			#endif
		#endif
		EBX += 40;
	} else if (EAX == 8) {
		// Int 핸들러 정보
		// +08 : 엔트리
		// +0c : reserve
		// +10 : mscount용 벡터
		// +14 : reserve
		// +18 : reserve
		// +1c : reserve
		ECX = 0;
		asmout("MOV DWORD [FS:EBX+0x08], TimerInt");
		(int) [FS:EBX + 0x0c] = ECX;
		asmout("MOV DWORD [FS:EBX+0x10], int8vect");
		(int) [FS:EBX + 0x14] = ECX;
		(int) [FS:EBX + 0x18] = ECX;
		(int) [FS:EBX + 0x1c] = ECX;
		EBX += 32;
	} else if (EAX == 12) {
		calc_count1ms();
		(int) [FS:EBX + 0x08] = EAX;
		(int) [FS:EBX + 0x0c] = 0;
		EBX += 16;
	} else {
		INT(0x03);
	}
	EAX = [FS:EBX];
	TEST(EAX, EAX);
	asmout("JZ TimerSC_EOC");
//	if (EAX == 0)
//		goto TimerSC_EOC;
	asmout("JMP DWORD PTR DS:[TimerSC_JmpTbl+EAX]");
}

void TimerInit()
//	범용 레지스터는 모두 파괴
{
	TimerWork *work == DS:0x0000;
	unsigned short PIT_CMD == 0x0043, PIT0_COUNT == 0x0040;
	unsigned short PIC_master_IMR == 0x0021, PIC_master_OCW1 == 0x0021;

	asmout("TimerSC_JmpTbl EQU 64");
	asmout("#work_head EQU 256");
	asmout("#work_last EQU 320");
	asmout("#work_timeout EQU 384");
	asmout("#work_freenode EQU 448");

	asmout("#TN_singalbuf EQU 0");
	asmout("#TN_call_vector EQU 32");
	asmout("#TN_time EQU 40");
	asmout("#TN_inverval EQU 52");
	asmout("#TN_back EQU 56");
	asmout("#TN_next EQU 60");

//	PUSH(DS);
	PUSHFD();

//	AX = CS;
//	AX += 8;
//	DS = AX;

	ECX = 0;

	CLI();

	work->longcounter = 1;
	work->status = 0;

	EAX = 0;
	work->head.time[0] = EAX;
	work->head.time[4] = EAX;
	work->head.time[8] = 0x80000000;
	work->head.interval = 0x90000000 /* invalid_interval */;
//	/* work->head.back = &(work->last) */ asmout("MOV DWORD PTR DS:[#work_head+#TN_back], #work_last");
	/* work->head.next = &(work->last) */ asmout("MOV DWORD PTR DS:[#work_head+#TN_next], #work_last");

	EAX--;
	work->last.time[0] = EAX;
	work->last.time[4] = EAX;
	work->last.time[8] = EAX;
	/* work->last.back = &(work->head) */ asmout("MOV DWORD PTR DS:[#work_last+#TN_back], #work_head");
//	/* work->last.next = &(work->head) */ asmout("MOV DWORD PTR DS:[#work_last+#TN_next], #work_head");
	// work->last.call_vector[0] = (offset) ???;
	// work->last.call_vector[4] = (segment) ???; // 약 천조년 후에 call 된다

	asmout("MOV EAX, #work_timeout");
	work->timeout.back = EAX;
	work->timeout.next = EAX;

// ECX를 보존해라

	TimerNode *tnode == DS:ESI, *tback == DS:EBX, *tnext == DS:EDI;

	EAX = 50 + 64;
//	(offset) tback = (offset) &work->freenode - sizeof (TimerNode);
//	(offset) tnode = (offset) &work->freenode;
//	(offset) tnext = (offset) &work->freenode + sizeof (TimerNode);
	asmout("MOV EBX, #work_freenode-64");
	asmout("MOV ESI, #work_freenode");
	asmout("MOV EDI, #work_freenode+64");

	work->last.next = (offset) tnode;

	do {
		tnode->back = (offset) tback;
		tnode->next = (offset) tnext;
		(offset) tback = (offset) tnode;
		(offset) tnode = (offset) tnext;
		(offset) tnext += sizeof (TimerNode);
		EAX--;
	} while (! = 0);

	work->head.back = (offset) tback;
//	work->freenode[0]. back = (offset) &work->last;
	asmout("MOV DWORD PTR DS:[#work_freenode+#TN_back], #work_last");
	/* tback->next = (offset) &work->head */ asmout("MOV DWORD PTR DS:[EBX+#TN_back], #work_head");

	asmout("MOV EAX, TimerSC_JmpTbl");
	asmout("MOV DWORD DS:[EAX+ 0], TimerSC_EOC");
	asmout("MOV DWORD DS:[EAX+ 4], TimerSC_Special");
	asmout("MOV DWORD DS:[EAX+ 8], TimerSC_GetNode");
	asmout("MOV DWORD DS:[EAX+12], TimerSC_FreeNode");
	asmout("MOV DWORD DS:[EAX+16], TimerSC_SetTimer");
	asmout("MOV DWORD DS:[EAX+20], TimerSC_CancelTimer");
	asmout("MOV DWORD DS:[EAX+24], TimerSC_SetNowTime");
	asmout("MOV DWORD DS:[EAX+28], TimerSC_SetNowTimeNode");
	asmout("MOV DWORD DS:[EAX+32], TimerSC_AddTimeNode");
	asmout("MOV DWORD DS:[EAX+36], TimerSC_SubTimeNode");
	asmout("MOV DWORD DS:[EAX+40], TimerSC_SetCallVectorNode");
	asmout("MOV DWORD DS:[EAX+44], TimerSC_SetMsgDataNode");
	asmout("MOV DWORD DS:[EAX+52], TimerSC_AddTimeNode2");

//	CLI();

	// IRQ-00의 마스크를 해제하여 인터럽트를 일으키게 한다.
	IN(AL, PIC_master_IMR);
	AL &= 0xfe; // IRQ-00 허가
	OUT(PIC_master_OCW1, AL);

	AL = 0x34 /* PIT0, Low/High, mode2, binary */;
	OUT(PIT_CMD, AL);
	#if (! defined(QEMU))
		AL = 0xa9; // 설정치(1193)
		OUT(PIT0_COUNT, AL);
		AL = 0x04;
		OUT(PIT0_COUNT, AL);
	#else
		AL = 0xae; // 설정치(19886)
		OUT(PIT0_COUNT, AL);
		AL = 0x4d;
		OUT(PIT0_COUNT, AL);
	#endif

	POPFD();

// 자신의 시스템 콜을 사용하여 어리석은 TAPI나 어플리케이션을 위해서 노드를 취해 준다.
// 그런 것은 Init가 하므로 여기에서는 하지 않는다.

//	POP(DS);
	return;
}

/* mscount 계산용 */

void far int8vect()
{
	ECX = EAX;
	AL = 0x60;
	OUT(0x20, AL);
	EAX |= 0xffffffff;
	IRET();
}

#if (! defined(QEMU) | 1)

void calc_count1ms_sub()
{
	PUSH(EAX);
	AL = 0x34;
	OUT(0x43, AL);
	POP(EAX);
	OUT(0x40, AL);
	AL = AH;
	OUT(0x40, AL);
	EAX = 0;
	do {
		EAX++;
	} while (! = 0);
	return;
}

void calc_count1ms()
/* do { EAX--; } while (! = 0);으로 1.0ms에 필요로 하는 시간을 가능한 한 정확하게 측정 */
/* 4GHz로 1clock/loop의 경우 0x003d0900가 되돌아 온다 */
{
	PUSH(EBX);
	PUSH(EDX);
	PUSH(ECX);

	/* 디폴트는 65536 ＞ PIT0 */

	/* 안전을 위한 더미 설정 */
	AL = 0x34;
	OUT(0x43, AL);
	EAX = 0;
	OUT(0x40, AL);
	NOP();
	OUT(0x40, AL);
	NOP();

	IN(AL, 0x21);
	BL = AL;
	AL = 0xfe;
	OUT(0x21, AL);	/* 측정 오차를 없애기 위해서 PIC를 타이머에만 한다 */

	EAX = 119; /* 캐쉬에 끼워 넣기위해(0.1ms) */
	calc_count1ms_sub();
	EAX = 1193 * 2;
	calc_count1ms_sub();
	EDX = ECX;
	EAX = 1193;
	calc_count1ms_sub(); /* 합계(3.1ms) */
	EDX -= ECX;

	AL = 0x34;
	OUT(0x43, AL);
	EAX = 0;
	OUT(0x40, AL);
	NOP();
	OUT(0x40, AL);

	AL = BL;
	OUT(0x21, AL);

	XCHG(EAX, EDX);	//	EAX = EDX;
	POP(ECX);
	POP(EDX);
	POP(EBX);
	return;
}

#else

/* QEMU에서는 어차피 정확한 값은 측정할 수 없다. 즉 헛된 측정 시간 */

void calc_count1ms()
{
	EAX = 1;
	return;
}

#endif
