라이센스에 대해

이 패키지에 있는 것은 t5lzma를 제외하고, 모두 KL-01입니다.
t5lzma의 소스는, tk5lgpl1에 있습니다.

dtk5s0c는 처음부터 내가 썼으므로, 완전하게 KL-01이 되었습니다.

t5lzma_p.txt에 대해서는, 이것을 LZMA-SDK에 대한 패치라고 오해하고 매우 폐를 끼치는 질의가
있어서 번들을 그만두었습니다(원래 라이센스 방위를 위한 것으로 어떤 그 이외의 용도의 것은 
아니기 때문에).

---

bim2bin4는, tek5를 생성할 경우에 한하여 t5lzma가 필요합니다. bim2bin.exe와 같은 장소
에 t5lzma.exe를 넣어 두세요. tek5를 생성하지 않다면, t5lzma는 불필요합니다. 
전개 뿐이라면 t5lzma는 필요 없습니다.

bim2bin4는, 기본적으로 OSASK ver. 4.7으로 조합해 이용하는 것을 전제로 하고 있고
디폴트로 생성한 어플리케이션이나 디폴트로 압축한 데이터는, OSASK ver.4.5 이전으로는 
이용할 수 없습니다. OSASK ver.4.5 이전이라도 이용하고 싶은 경우는, -tek0 rjc:0
의 2개의 옵션을 추가해 주세요. tek5 때에 eprm:z0를 지정하면, stk5 모드가 되어 
OSASK ver.4.6에서도 사용할 수 있습니다.

bim2bin4로부터 rjc 옵션(상대 점프 컨버터 옵션)이 디폴트로 유효하므로, 
OSASK 어플리케이션에 한해, 같은 압축 형식이어도 이전보다 컴팩트하게 되는 경
향이 있습니다. 이것을 오프로 하고 싶은 경우, 압축시에 rjc:0을 지정해 주세요.

그 외, 디폴트치가 몇개인가 변경되고 있습니다. BS:의 디폴트는 0이 되었습니다
.MD:의 디폴트는 tek1~tek5 때는 MD:0이 되었습니다. clv:의 디폴트는 4로 했습니다.

OSASK 어플리케이션을 생성하는 경우(bim로부터 org를 만들 때의 이야기), -tek5를 선택하기 위해서는,
obj2bim로 스택을 크게 할 필요가 있습니다. -tek0~-tek2까지라면, 지금대로 최저 4k로 괜찮습니다. 
-tek5를 선택하는 경우, 20k를 최저라고 생각해 주세요.
-osacmp 때는(org로부터 bin를 만드는 경우), -tek5를 선택해도 스택을 고쳐야만 하는 것은 아닙니다.

bim2bin4의 -restore는 완성되지 않은 전개 루틴을 사용하고 있으므로,
전개가 느립니다. 첨부의 tstdstk 등을 사용하는 편이 훨씬 고속입니다. bim2bin4의 restore기능은
덤이라고 생각해 주세요.

---

간단한 사용법：

[압축]

prompt>bim2bin -osacmp -tek1 in:data.bin out:data.tk

prompt>bim2bin -osacmp -tek2 in:data.bin out:data.tk

prompt>bim2bin -osacmp -tek5 in:data.bin out:data.tk

tek1와 tek2에서는, 모두 디폴트에서는 stk 호환 형식이 됩니다. tek5에서는 디폴트는, 
stk비호환 형식입니다. 8MB를 넘는 파일은 in:로 지정하지 말아 주세요.

[전개]

prompt>bim2bin -restore in:data.tk out:data.bin

[어플리케이션 생성]

prompt>bim2bin in:helloc4.bim out:helloc4.org malloc:1k mmarea:0 -tek1

prompt>bim2bin in:helloc4.bim out:helloc4.org malloc:1k mmarea:0 -tek5

[-tek5로 사용할 수 있는 추가 옵션]

  eprm:z0 -- stk5 호환 모드(압축·전개가 빠르지만 압축율은 좋지 않다)
  eprm:z1 -- tek5 컴팩트 모드(소규모·중 규모의 것은 이것이 제일 효과가 있다)
  eprm:z2 -- tek5 normal 모드. 디폴트.
  eprm:@  -- tek5 auto 모드. z0~z2의 어느 것으로 하는지를 해석하여 자동 결정한다.
             그러나 응분의 시간이 걸리므로, 부담없이는 사용할 수 없다.
             512/1024콘테스트 등 때로는 편하게 여겨진다.

---

추천：

OSASK에서는 바꿔 써서 액세스를 하지 않는 파일에 대해서는, 압축해 두는 것을 추천합니다. 
물론, -osacmp 하면 결과적으로 커져 버린다든가, 겨우 1할 밖에 작게 되지 않을 경우에는
압축해 두지 않아도 괜찮다고 생각합니다.

압축하게 되면, 어느 형식을 사용할지 헤메게 되는데 그럴 때에는, 우선, tek5로
압축해 봅시다. 그리고 압축 결과가 100KB를 넘으면, tek2로 하는 일도 검토해 봅시다.

이것은 tek5의 전개에 조금 시간이 걸리기 때문에(그래도 tek0 정도입니다만), 작은 파일에서는
전개 시간이 신경이 쓰이는 일은 우선 없습니다만, 큰 파일에서는 신경이 쓰이는 사람이
있을지도 모르기 때문입니다. ...그렇지만, 큰 파일이야말로 고압축으로 하고 싶은 경우도
있기 때문에, 그러한 때에는 tek5로 하는 편이 좋을 것입니다. 또, 100KB라고 하는 것은 
하나의 기준으로 하고, 사람에 따라서 20KB였거나 500KB이어도 괜찮다고 생각합니다.

---

덤：

끝까지 읽어 준 당신에게, 512바이트 캠페인·1024바이트 캠페인 시에 
유리하게 되는 테크닉을 알려 드리겠습니다. 다른 사람에게는 비밀이에요, 라고 하지말고, 
모르는 사람이 있으면 가르쳐 주세요.

1.
ASKA나 NASM로 만든 OSASK 어플리케이션을 osacmp 할 경우에는, rjc:0 쪽이 압축율이 좋은 
경우가 있습니다. 비교해 보면 됩니다.

2.
이것은 -tek5 한정입니다만, OSASK 어플리케이션을 osacmp할 경우에(org로부터 bin을 만들 때),
eopt:-lc2로 하면 압축율이 좋아지는 경우가 있습니다. 다만 이것을 할 때에는,
스택을 늘릴 필요가 있을지도 모릅니다. -lc에 대해서는 0-8의 범위에서 건드릴 수 있습니다
...추가로 osaskgo와 같이 큰 어플리케이션에서는 -lc8로 하면 좀 더 압축율이 좋아집니다.
또, lc를 크게 하면 전개 속도가 떨어진다는 점에 주의가 필요합니다. (-lc의 디폴트는 0입니다).
    lc0    lc1    lc2    lc3    lc4    lc5    lc6    lc7    lc8
    20k    22k    28k    40k    64k   112k   208k   400k   784k

(보충)
  pb라고 하는 파라미터는, 압축 대상으로 어떤 주기성이 있는가를 알려주는 것입니다. pb0은
  1바이트 단위의 주기(즉 주기 없음), pb1는 2바이트 단위의 주기, pb2는 4바이트 단위의
  주기를 의미합니다. 디폴트는 pb0입니다. 바이너리 데이터 등은 주기적으로 가능하므로
  pb는 그 주기에 따라 하는 편이 좋습니다만, 실행 코드나 텍스트 데이터라면
  주기적으로 할 수 없기 때문에 pb0쪽이 고압축이 되겠지요. pb는 최고로 4까지(결국
  16바이트 주기까지) 지정할 수 있습니다.

(보충)
  lc라고 하는 파라미터는, 압축 대상의 바이트간의 상관 정도를 나타냅니다. 0x00 후에는
  0x01이 오는 일이 많고, 직전의 바이트부터 다음 바이트의 예측정도가 가능한가의 지표입니다. 
  lc0에서는 바이트간의 상관은 전혀 없으면 상정합니다.
  lc1에서는 직전의 바이트의 상위 1비트를 참고하여, 다음 바이트를 예측합니다. lc2에서는 직전
  바이트의 상위 2bit를 참고로 합니다. lc8에서는 직전의 바이트의 8bit 모두를 예측에 사용합니다.
  상관이 있을 듯한 파일이어도, 작은 파일로는 충분한 통계를 얻을 수 없기 때문에,
  그러한 경우에는 lc를 크게 해도 효과는 얻을 수 없습니다.

3.
이것도 tek5 한정 테크닉입니다만, OSASK 어플리케이션에 한정하지 않고 여러 가지 사용할 수 있습니다
(아니 뭐, 앞에서 기술한 lc는 텍스트 파일에도 효과적이지 않습니다만).
eopt:-fb128라고 하는 옵션이 디폴트가 되어 있습니다만, 이 숫자를32-255의
범위에서 건드리게 되면 압축율이 좋아지는 경우가 있습니다. 작은 파일에서는 fb를 바꾸어
도 거의 효과는 없습니다. lc2 등과 함께 지정하는 경우는,
eopt:-lc2_-fb120 등과 언더 스코어로 이어 주세요.
(이 항에 덧붙여 씀)
eopt를 개조하면 eprm 이상으로 효과가 있는 경우가 많습니다만, 최적 파라미터를 인력으로
찾는 것은 매우 힘든 일입니다. 그래서, 이것을 자동으로 시키는 옵션을 만들었습니다.
다만 이 기능을 사용하면 압축 시간이 500배 정도 걸립니다. 그러니까 기본적으로는 권장하지 않습니다.
eopt:@로 하면 자동으로 합니다. 덧붙여서 eopt:@@로 하면 어떤 파라미터를 테스트하고 있는지,
도중 경과를 알 수 있습니다(시간은 바뀌지 않습니다).

4.
이것도 tek5 한정 테크닉입니다. 게다가 eprm:z2 때 밖에 사용할 수 없습니다.
eprm에는, d~h의 옵션이 있습니다. d옵션은0-3, 그 외는0-1의 범위에서 지정
할 수 있습니다. 지정할 때는, z2의 뒤로 늘어 놓습니다. 디폴트는, eprm:z2d0e0f0g0h0입니다.
디폴트인 채로 좋은 옵션은 지정하지 않아도 괜찮습니다.
예를 들어, osaskbmp는, erpm:z2d3h1가 제일 작아집니다.
  d:출현 문자의 통계 알고리즘 번호
  e:LZ가 움직이기 어려운 부분이 많이 있을 때 1로 하면 유효
  f:LZ의 거리 정보의 통계 알고리즘 번호
  g:LZ로 원거리와 근거리로 알고리즘을 바꿀지 어떨지
  h:LZ의 일치장2-9과10-17로 알고리즘을 바꿀지 어떨지
이런 건 설명해도 모르기 때문에, 적당히 만져 볼 수 밖에 없습니다.

