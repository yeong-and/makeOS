

2001/12/06

<ASKA Ver1.0β1>
·구조체, 초기화, if등의 문장, 어셈블러 키워드의 직접 지정이 아직 되어 있지 않다
·앨리어스(alias)는 되어있지만 아직 디버그하고 있지 않다
·캐스트도 되어있지만 아직 디버그 하고 있지 않다
·「=」의 문장은 일반적인 것 밖에 대응하고 있지 않다. far 포인터에 대입하는 등의
　처리는 아직 쓰여있지 않다. 형태 체크도 하지 않고 있다
·지금 생각해서 붙였지만 local 변수로 bAlias=false라면 주소 라벨이여서 반드시
　MASM로 고칠 때에는 「#」을 붙이도록 하지 않으면(=버그)
·local 변수는 앨리어스(alias) 이외는 대응하고 있지 않다. 이 대응은 꽤 후의 예정
·함수의 인수도 대응하고 있지 않다

<ASKA Ver1.0β2>
·주소 라벨 관계의 버그를 수정
·앨리어스(alias)는 구조체 관계 이외는 사용할 수 있을 듯.
·if문, 어셈블러 키워드 직접 지정해서 사용할 수 있게 되었다
　추가로 if문은 if~goto를 사용할 수 있다
·주소 라벨의 전방 참조를 할 수 없는 것을 알아챘다. 어떻게 하지···

<ASKA Ver1.0β3>
·loop~break문을 서포트했다. 이것과 수반하여, if~goto와 같이 if~break에도 라벨
　최적화 처리를 추가한다
·구조체를 서포트했다. 이것과 수반하여, 앨리어스(alias) 관계의 디버그가 종료
·캐스트와 관계하여 우선 디버그가 종료( 실은 치명적이었다···)
·배열이나 포인터의 변수 정의가 실제 할 수 없었던 것을 수정

<ASKA Ver1.0β4>
·ESP에 베이스 속성이 붙지 않았던 것을 수정
　(···실은 카와이 사장에게 지적되어 처음으로 알았다)
·asmout문을 추가했다. 추가했더니 이것은 어셈블러 키워드 지정과 같은
　글자의 의미라고 눈치채었다(땀이 나고.....음-, 뭐, 피해는 없기 때문에 우선 붙이고 가자)
·식문 「=」에 관해서 확장 대입과 하위 대입을 서포트했다. 형태 체크도 엄밀하게
·아, 값 그 자체에는 *이라든지 &라든지 사용할 수가 없어

<ASKA Ver1.0β5>
·함수의 속성이 near가 되지 않는 버그를 수정(이것도 카와이 사장의 지적에 의해 발견)
·함수를 쓰기 전에 한번도 글로벌 변수를 선언하고 있지 않아 다운되는 치명적인 버그를
　발견! 위험하다···
·함수내에서 글로벌 변수를 선언할 수 있는 static 키워드를 추가

<ASKA Ver1.0β6>
·/*~*/형태의 코멘트를 서포트했다
·include 만이 아니고 #include도 추가(같은게 있어도 의미 없는데)
·어휘분석 관계의 치명적인 버그를 몰래 수정. 그래서 어디가 고쳐졌는지는 비밀
·while문과 do~while문을 서포트
·continue문을 서포트. 이것과 수반하여 if~continue문에 라벨 최적화 처리를 추가한다
·for문은 지연 write를 수행하지 않으면 안 되기 때문에 서포트가 불가능하다 것
　을 알 수 있다(;_;)
·cmp reg, 0일 때에는 test reg, reg와 최적화 하도록 했다(협력：카와이 사장)
·mov reg, 0일 때예는 xor  reg, reg와 최적화 하도록 했다(협력：카와이 사장)
·귀찮아서 레지스터일 때예는 형태 지정을 생략 시켰다

<ASKA Ver1.0β7>
·sizeof 연산자의 서포트
·값은 숫자와 주소 연산자 &밖에 사용할 수 없었지만, []안의 때와 같이
　여러가지 연산자를 사용할 수가 있게 되었다
·reg*=1, 2,3,4,5,8,9로 reg/=1, 2,4,8으로 reg<<=imm, reg>>imm=를 사용할 수 있게 되었다
·reg<<=1시에는 add reg, reg와 최적화 하도록 했다(협력：카와이 사장)
·reg+=1, reg-=1을 각각 inc reg, dec reg와 최적화 하도록 했다(전술)
·int 키워드를 추가했다(long과 같다∼)

<ASKA Ver1.0β8>
·far 포인터 관계의 처리를 추가했다

★이 이후는 모두 소스의 대대적인 정리까지의 잠정 대응

<ASKA Ver1.0β9(미공개… 후에 소스를 분실)>
·for(;;){}만 서포트했다(결국은 loop문과 동일)
·플래그 비교의 서포트
·if(==) 뿐만이 아니라, if(==0)와 같이 0을 붙이는 것도 되게 했다
·2^n의 곱셈을 쉬프트 연산으로(협력：카와이 사장, Generator::CheckPower2()도)

<ASKA Ver1.0β10>
·로컬 변수의 서포트
·거기에 따라, default == [SS:EBP + &&];구문을 서포트
·게다가 시스템 변수 local를 서포트
·EAX = DATA::"string\n";를 서포트
·통상 변수와 배열의 초기화를 할 수 있게 되었다
·조건식에서 F,! F형식의 서포트
·수동 앨리어스(void [2];나 int [1]등)
·segment CODE == ES;의 서포트(asmout("assume ES:CODE");해, 이후
　CODE:???가 나오면 ES:???로 한다)

<ASKA Ver1.0β11>
·for문의 서포트

<ASKA Ver1.0β12>
·어셈블러 키워드 바로 지정에 중대한 버그가 남
　인수에 2개 이상 레지스터를 지정할 수 없는 버그를 수정.
·정수 관계 버그를 수정.
·변수 선언으로 ","를 사용할 수 있도록 했다.

<ASKA Ver1.0β13>
·구조체 멤버 선언으로 ","를 사용할 수 있도록 했다.
·정수 선언으로 정수식을 넣기로 했다.
·세그먼트(segment) 레지스터에 대입할 수 없었던 초기 버그를 수정

<ASKA Ver1.0β14>
·앨리어스(alias) 선언시에, == SS:ESP + 28;와 같이 정수식을 쓸 수 없었던 것을 수정.

<ASKA Ver1.0β15>
·앨리어스(alias) 선언시에, 앨리어스(alias)를 사용할 수 없었던 것을 수정.
·앨리어스(alias) 선언시에 sizeof를 사용해도 반영되지 않는 버그를 수정.
·[SS:0x1234]와 같은 쓰는 법을 할 수 없었던 것을 수정.
·offset 캐스트와 segment 캐스트가 정상적으로 일하지 않았던 것을 수정.
·default(code == CODEseg);구문의 서포트. 이것은 함수의 code segment 할부를
　생략 하는 것이다.

<ASKA Ver1.0β16>
·변경 개소 불명

<ASKA Ver1.0β17>
·DW(1,2,3);가 dw 1,12,13으로 전개되고 있던 것을 수정.
·로컬 라벨 지정 #과 글로벌 라벨 지정 @을 추가. 변수는 불완전. 전방 참조 불가.
·함수의 디폴트 타입을 near로 변경.
·루트 스코프에 asmout를 기술할 수 있도록 했다. 부작용에 요주의.
·루트 스코프로 변수 정의할 수 있도록 했다.
·디폴트 데이터 세그먼트를 서포트. 다만 정수의 수치 할당은 불가.
·default(local == SS:EBP);구문 지원.
·반대로, default==[SS:EBP+&&];구문 미 지원.

<ASKA Ver1.0β18>
·문자열 정수 내에서 \n\r\tY0의 이스케이프 문자를 서포트했다.
·문자열 정수의 마지막에 디폴트로 \0를 세트 하고 있던 것을 세트 하지 않게 했다.
·WORK *work == DS:0x1000; DD((offset) work->def);가 다운되어 있었으므로 수정.
※여기서의 변경은 호환성에 지장을 초래할 우려가 있기 때문에, 주의해 주세요.
　이상하다고 생각하면 연락을 부탁합니다.

<ASKA Ver1.0β19> Modified by RisaPapa
 2001/12/06
·영어로 로컬라이즈
·에러 종료를 커맨드의 리턴값에 반영

<ASKA Ver1.0β20> Modified by hideyosi & I.Tak.
2003/08/01
·Linux 대응 (-DLINUX)
·CRLF이외의 개행 코드(UNIX, Mac)와 개행 코드 이외로 끝나는 파일에 대응
·Usage에 남아 있던 SJIS 문자를 수정
·에러가 없을 때는 에러수를 표시하지 않는다
·맨 마지막 줄에 개행이 없는 소스로 불편이 일어나는 버그를 수정



<지금부터 해야 할 일>
·배열로{}를 이용한 초기화
·라벨의 전방 참조
·CF를 수반하는 덧셈 뺄셈의 서포트
·대입 형식의 플래그 조작(CF = 0;)
·if ((AL & 0x80) == 0)를 TEST에 전개한다
·LOOP문을 만든다

·parser와 generator의 재구축. 이제 소스가 더러워짐 (엉엉)
·포인터를 use와 독립으로 결정한다
·if블록중에서, 마지막에 return, break, continue, goto가 오면 jmp를
　생략하여 최적화한다
·call문의 직후에 return이 있는 경우는 call를 jmp로 하여 return을 지우는 최적화를 한다
　다만, 이것은 near-call, near-return나 far-call, far-return의 구조밖에
　할 수 없다. 이외로 하면 스택이 엉망이 되어 버린다.
·LEA식 문장 서포트
·union 서포트
·구조체 선언 중의, size()의 서포트
·구조체 선언 중의, align()의 서포트
·구조체 선언 중의, origin()의 서포트
·코드 기술 중의, align()의 서포트
·코드 기술 중의, origin()의 서포트
·간접 call, 간접 goto의 서포트
·디코드 캐스트의 서포트(우선은 무시하는 것만으로 좋다)
