---------------------------------------------------------------------
                  C언어형 어셈블러"ASKA" Ver1. 0β18
---------------------------------------------------------------------
제작일：2001/10/01
제작자：shoe16(shoe16@wizard.elec.waseda.ac.jp)
총지휘：川合堂
수정일：2001/12/06
수정자：RisaPapa(ringring@zb4.so-net.ne.jp)

1. ASKA란

　예전의 어셈블러의 기술을 1문=1명령을 지키면서 C언어가 될 수 있도록 근접하게 하기 위한
구상 아래에서 태어난 것이 ASKA입니다.
　종래, 어셈블러에서는 if문이나 loop문 등으로는 불필요하게 라벨이 증가하게 되어 
관리가 상당히 어려웠습니다. 또 구조체가 빈약하기 때문에, 데이터 형태를 한 눈에 훑어 보는 것을
지원하기가 매우 곤란했습니다. 게다가 어셈블러는 자유스러운 언어가 아니기 때문에 1행에 1명령으로 
구성되어 행수가 매우 많아져서 프로그램의 전망이 그다지 좋지 않았습니다.
이러한 문제에 대처할 수 있도록 개발된 것이 ASKA라고 하는 것입니다.


2. ASKA의 사용법

　DOS의 커맨드 prompt상으로부터

	ASKA 입력 파일명 출력 파일명

으로 하면 입력 파일을 컴파일해서 386 ASM 형식의 출력 파일을 생성합니다. 
출력 파일을 생략할 수도 있습니다. 그 경우, 입력 파일명이
"sample.ask"라면 출력 파일명은 "sample.asm"가 됩니다.

예：
	C:\ASKA\WORK\>ASKA sample.ask sample.asm
	C:\ASKA\WORK\>ASKA sample.ask


중요：커맨드 prompt의 property(command.com의 short cut의
　　　property)의 메모리 프로텍트 모드(DPMI) 메모리의 합계를 자동
　　　으로 하지 말고 1024등으로 해 주세요. 자동인채로는 움직이지 않습니다.


3. ASKA의 특징적인 기능

　ASKA에서는,

·if~else~, loop~break, for, while, do~while, continue를 사용할 수 있습니다.
·char, short, long, byte, word, dword로 변수 선언을 할 수 있습니다.
·함수내에서 static 키워드를 사용하는 것으로 정적인 변수를 선언할 수 있습니다.
·함수는 반환값, 인수 없음의 void funcname();로 선언을 할 수 있습니다.
·식문에는=,+=,-=,*=,/=,&=,|=,^=,<<=,>>=,=-,=~, 를 사용할 수 있습니다.
·비교식에는==,! =,<,<=,>,>=, 를 사용할 수 있습니다.
·구조체에 의한 형태 정의를 사용할 수 있습니다.
·포인터나 배열도 사용할 수 있습니다.
·segment에 의한 세그먼트(segment) 정의도 제대로 할 수 있습니다.
·현 버전의 ASKA로 다 보충할 수 없는 386 ASM 본래의 니모니크 명령도
　「asmkeyword(list, ...);」으로 서포트.
·상기로 할 수 없다 ".386p" 등은 asmout(". 386p");로 서포트.
·앨리어스(alias)라고 하는 레지스터를 변수에 할당해 사용할 수가 있습니다.
·로컬 변수를 정의할 수 있습니다.

　반대로, ASKA에서는,

·라벨의 전방 참조를 할 수 없습니다.
·함수에 인수를 갖게할 수가 없습니다.



4. 간이 언어 사양

·인클루드
	include "파일명"
으로 하는 것으로 파일을 읽어들일 수가 있습니다.
　또, include 대신에 #include에서도 같은 동작을 합니다.


·코멘트
	// 코멘트문
으로 하는 일로 //이후, 개행이 나타날 때까지의 문장이 comment out됩니다. 이것
들의 코멘트문은 잘라 버릴 수 있습니다.
　또, C언어 같이 /* ~ */도 서포트했습니다. 다만, 네스트가 효과가 있도록
구성되어 있으므로 주의가 필요합니다.


·식의 파라미터
　식의 파라미터는 레지스터(r), 메모리 참조(m), 즉치(i)의 3 종류가
. 각각,
	r:EAX, CX, DS, CR0
	m:data, data[0], [EAX], [DS:EAX+EBX*2+&data+~3], *(EAX+1)
	i:0xffff,-1, 100,0b0011, &DATA, sizeof(TYPE),
등과 같이 걸칩니다. 또, 변수나 메모리 참조의 데이터형을 일시적으로 바꾸어
재정의하는 경우에는 캐스트를 사용할 수가 있습니다.

※여기에 캐스트 관계, 연산 관계, []내 기술방식 관계를 쓴다


·식문
　식문은
	rm  = rmi;	→	MOV	rm, rmi
			→	MOVSX or MOVZX	(사이즈가 다를 때)
	r   =   0;	→	XOR	r , r
	rm += rmi;	→	ADD	rm, rmi
	rm +=   1;	→	INC	rm
	rm -= rmi;	→	SUB	rm, rmi
	rm -=   1;	→	DEC	rm
	rm *=   1;	→	최적화에 의해 생략
	reg*=   2;	→	ADD	reg, reg
	rm *=   2;	→	SHL	rm, 2
	r32*=   3;	→	LEA	r32,[r32 * 2 + r32]
	rm *=   4;	→	SHL	rm, 2
	r32*=   5;	→	LEA	r32,[r32 * 4 + r32]
	rm *=   8;	→	SHL	rm, 3
	r32*=   9;	→	LEA	r32,[r32 * 8 + r32]
	rm *=   1;	→	최적화에 의해 생략
	rm *=   2;	→	SAR	rm, 1	(unsigned때는 SHR)
	rm *=   4;	→	SAR	rm, 2	(unsigned때는 SHR)
	rm *=   8;	→	SAR	rm, 4	(unsigned때는 SHR)
	rm &= rmi;	→	AND	rm, rmi
	rm |= rmi;	→	OR	rm, rmi
	rm ^= rmi;	→	XOR	rm, rmi
	rm<<= rmi;	→	SAL	rm, rmi	(unsigned때는 SHL)
	reg<<=  1;	→	ADD	reg, reg
	rm>>= rmi;	→	SAR	rm, rmi	(unsigned때는 SHR)
	rm =- rmi;	→	NEG	rm
	rm =~ rmi;	→	NOT	rm
	rm++;		→	INC	rm
	rm--;		→	DEC	rm
와 같이 됩니다. 인크리먼트(increment)와 감소 이외는 왼쪽으로 1 파라미터,
오른쪽으로 1 파라미터입니다. 다만, =-이라고 =~는 왼쪽과 오른쪽의 파라미터가 완전히 같은
글자가 아니면 안됩니다.
＃현 버전에서 체크는 행해지고 있지 않습니다만···

특수한 경우로서 far*로 선언된 라벨 및 앨리어스(alias)는, +=, -=, ++, --
에 한해 offset 캐스트를 붙이지 않아도 디폴트로 오프셋(offset) 연산이 시
됩니다. 또, 좌변과 우변으로 동일한 세그먼트(segment) 레지스터를 지정한 영역의 경우는, 
오프셋(offset)만이 대입됩니다. 게다가 좌변이 앨리어스(alias)
그리고 우변이 메모리일 때는 여느때처럼 L(segreg)명령을 사용해 디코드됩니다.

예：
	int*	a == DS:EAX;
	int*	b;
	a = b			→	LDS	EAX, b


·비교식과 if~else문
　비교식은 if()문 안에서 사용되고 있습니다만, 연산자가 다른 것 이외는 식문과
완전히 같습니다. 「==,! =,<,<=,>,>=」가 사용할 수 있습니다.
　다만, 대소의 비교때에 부호가 있고 없음이 중요하게 되므로, 변수의
형태등이 없는 경우에는 캐스트(unsigned)인지 (signed)를 붙여 명시적으로 부호의
유무를 선언할 필요가 있습니다. 이 때, 반드시 왼쪽의 파라미터의 전에
붙이도록 해 주세요. 그 이외는 에러가 됩니다.

예：
						cmp	eax, 0
	if((unsigned) EAX > 0){			jbe	#LL0000
		
						jmp	#LL0001
	}else{				#LL0000:
		
	}				#LL0001:

　다만 if~goto와 if~break 및 if~continue는 라벨이 최적화되어 점프가 2번 되지는 않습니다.
예：
	if((unsigned) EAX > 0)			cmp	eax, 0
		goto label;			ja	#label

　또, 비교할 때에

예：
	if((unsigned)>){			jbe	#LL0000
		
						jmp	#LL0001
	}else{				#LL0000:
		
	}				#LL0001:

와 같이 기술할 수도 있습니다. 이것에 의해 비교는 행해지지 않고 플래그로
점프만을 합니다.

이하, 참고로 비교문으로 사용할 수 있는 형식을 씁니다.

	a==b, a! =b, a<b, a<=b, a>b, a>=b	：cmp 첨부
	==, ! =, <, <=, >, >=			：cmp 없음
	==0, ! =0				：cmp 없음 별도의 버전
	a, ! a					：a! =0, a==0의 별도의 쓰는 법


·loop문
　loop문은 영구 루프를 만들어 냅니다. 영구 루프로부터 빠지기 위해서는 break
문장을 사용할 필요가 있습니다.

례：
	loop{				#LL0000:
		
						jmp	#LL0000
	}				#LL0001:


·break문
　break문은 loop문으로부터 빠지기 위함니다. 네스트 한 loop를 단번에 빠져 나가기 위해 
break의 후에 숫자를 붙일 수가 있습니다. 이 숫자는 단번에 loop문장을 빠지는 수를 나타냅니다. 
즉, 숫자를 붙이지 않는 단순한 break; 문장은 '1'이 생략되어 있습니다.

예：
	break;
	break 2;


·for문
　for문은 이하와 같이 됩니다.

예：
	for(ECX=0; ECX<10; ECX++){		xor	ecx, ecx
					#LL0000:
						cmp	ecx, 10
						jge	#LL0001
		
						inc	ecx
						jmp	#LL0000
	}				#LL0001:

＃예문에서는 mov r, 0  →  xor r, r의 최적화를 하고 있습니다


·while문

　while문은 이하와 같이 됩니다.

예：
	while(EAX == 0){		#LL0000:
						test	eax, eax
						jne	#LL0001
		
						jmp	#LL0000
	}				#LL0001:

＃예문에서는 cmp r, 0  →  test r, r의 최적화를 하고 있습니다


·do~while문

　do~while문은 이하와 같이 됩니다.

예：
	do{				#LL0000:
		
						test	eax, eax
						je	#LL0000
	}while(EAX == 0);		#LL0001:

＃예문에서는 cmp r, 0  →  test r, r의 최적화를 하고 있습니다


·변수 정의
　변수 정의는

예：
	char		a;	부호 1바이트
	short		b;	부호 2바이트
	long		c;	부호 4바이트
	byte		d;	부호없이 1바이트
	word		e;	부호없이 2바이트
	dword		f;	부호없이 4바이트
	long*		g;	디폴트에서는 far 포인터
	long near *	h;	near 키워드를 적으면 near 포인터
	dword		i[12];	dword형의 배열 12바이트
	int		j;	부호 4바이트
	unsigned int	k;	unsigned에 의해 부호없이 4바이트

와 같이 됩니다. 여기서 주의 해야 할 것은 배열이지요. 통상의 C언어에서는 배열
은 「형태의 요소를 몇개 확보할까」였지만, ASKA에서는 단순하게 「몇 바이트 확보
할까」라고 하는 의미가 됩니다. 즉, 예문의 의미는 「dword형의 배열을 3
요소 확보한다」라고 하는 의미가 됩니다.
　또, 이것이 글로벌 정의라면 초기화가 필요합니다. 다만, 현재
에서는 구조체를 초기화할 수 없습니다. 배열의 경우는""을 사용한 문자열만
가능합니다.

예：
	long	c = 1;

　또, 로컬 정의라면, 현재는 초기화는 하지 않아도 됩니다.
로컬 변수를 사용하는 경우, 꽤 제약이 있을테니 주의해 주세요.

예：(카와이 사장보다)

	void function()
	{
	    PUSH(EBP);  /* 이것은, 편입 함수 */
	    ESP -= local;  /* local는, ASKA의 특별한 변수 */
	    EBP = ESP;
	
	    int a, b;
	    a = 3;
	    b = ECX;
	
	    ESP = EBP + local;
	    POP(EBP);
	    return;
	}

이와 같이, 스택의 관리를 확실히 하지 않으면 폭주합니다.
소스 중의 local는 시스템 변수로, 이 함수로 사용되고 있는 로컬 변수의
총 바이트수를 나타냅니다. 또, 로컬 변수를 디폴트의 SS:EBP에 할당하고 싶지
않을 경우는,

예：
	default(local == SS:EBP - local);

의 구문으로 변경할 수가 있습니다. 덧붙여서, 상기의 방법은 ENTER, LEAVE를 사용할 때
쓰는 법입니다.

※default == 의 식이나, &&는 폐지되었습니다.


　로컬 정의의 앨리어스(alias)에 의한 레지스터에의 할당은,

예：
	long	c == EAX;

　이렇게 하는 것으로, c를 액세스 하면 EAX를 액세스 하는 것과 같은 효과를 얻을 수가 있습니다. 
이점의 하나는 레지스터에 이름을 줄 수가 있기 때문에 용도가 확실하다는 것과,

예：
	struct	Point{
		long	x;
		long	y;
	};

	Point*	p == DS:EAX;

와 같이 구조체를 정의하여 그 포인터의 앨리어스(alias)를 만드는 것으로,

예：
	p->x = 7;			mov	DS:[EAX], 7
	p->y = 9;			mov	DS:[EAX+4], 9

와 같이 구조체로 액세스할 수가 있게 됩니다.
　이것은, 통상 변수의 포인터는 참조할 수 없다고 하는 약점을 보충하기 위한 충분한
확장이라고 생각합니다. 또,

예：
	void	[2];

와 같이 수동으로 배열을 지정할 수가 있습니다.

게다가 static 키워드를 사용하는 것으로, 함수내에 정적 변수를 만들어 낼
수 있게 되었습니다.

예：
	static long DATA::staticdata;

예와 같이, 반드시 할당하는 세그먼트(segment)명을 명시해 주세요.

또, 자동 static 변수라고 말해야 하며, 문자열 자동 할당이 서포트되었습니다.

예：
	EAX = DATA::"string\n";

이와 같이, 함수중에 문자열을 할당할 수가 있습니다.


·구조체 정의
　구조체는 C언어라고 말하는 것보다는, C++언어에 가까울지도 모릅니다. 물론 함
수를 안에 포함할 수는 없습니다만, typedef로 하나 하나 정의하거나 하지 않아도
되는 점이 C언어의 구조체에 비해 편리합니다. 서식은 앨리어스(alias) 부분을 참조
해 주세요.


·세그먼트(segment) 정의
　함수나 변수를 어느 세그먼트(segment)에 할당할까 확실히 정의하지 않으면
안됩니다.

예：
	segment DATA(DWORD, PRIVATE, USE32, RW, 'DATA');

　여기서, () 안의 파라미터는 순서에 관계 없습니다. 좋아하는 대로 써
주세요. 또, 글로벌 변수는 이 segment 명령 내에서 밖에 쓸 수 없습니다.

예：
	segment DATA(DWORD, PRIVATE, USE32, RW, 'DATA'){
		long	a = 1;
		dword	b;
	}


·함수 정의
　함수는, 우선 그것을 할당하는 세그먼트(segment)가 없으면 안됩니다. 상기의
segment 명령에 의해 세그먼트(segment)를 작성해 주세요.

예：
	segment CODE(DWORD, PRIVATE, USE32, ER, 'CODE');

그 후,

예：
	void CODE::func(){
		
	}
		또는
	void CODE::func(void){
		
	}

그리고 함수를 선언할 수가 있습니다. 이 함수 안에 프로그램을 작성하게
됩니다. 이 때, C언어와 같이 자동으로 return을 붙여주지 않기 때문에
주의해 주세요.
　또, C언어와 같이 특별한 함수로 main()이 있습니다. 이것이 프로
램내에 있었을 경우, 「end main」이 어셈블러의 전개 시 추가됩니다.
즉, main이 엔트리 포인트가 되는 것입니다.

그 밖에 함수의 prototype 선언도 서포트하고 있기 때문에,

예：
	void CODE::func();
		또는
	void CODE::func(void);

라고 쓸 수도 있습니다.

·라벨
　라벨은

예：
label1:
@label2:
#label3:

void	main(){
label4:
@label5:
#label6:
}

의 작성법이 있습니다. 여기서 @는 글로벌 scope를 의미하고, #는 로컬 scope를
의미합니다. 아무것도 붙이지 않으면 디폴트의 의미가 됩니다.
그러나 글로벌 scope로 로컬 라벨은 정의할 수 없기 때문에, label3는 에러로
됩니다.

주의할 점은, 이 라벨의 사용법입니다. 후방 참조하는 경우에는 자동적으로
글로벌인가 로컬인가 판단해 주므로 아무런 문제가 없습니다만, 전방 참조의 경우에는
자동적으로 판별하지 못하고, 로컬 scope로 해 버립니다.


5. 샘플

　죄송합니다, 아직 되어있지 않습니다.

6. 면책
　이것은 프리 소프트웨어입니다. 이 소프트를 사용하여 어떠한 장해가 발생되었다고 해도
이 쪽에서는 책임을 일체 지지 않습니다.
　또, 이것은 당분간 전재 금지입니다.
　이 소프트웨어에는 야네우치오씨가 작성했습니다
	yaneurao GAME SDK for Windows95/98/NT/2000 version 1.00α4
의 스크립트 부분의 골격 부분 및 어휘 분석부를(소스 프리이기 때문에)
거의 그대로 사용했습니다.

※소스 프리라고 해도 규격외의 사용법이므로, 야네우라오씨의 허가를
　아직 얻지 않은 현상은 우선 사내 공개만.

또, 야네우라오씨의 Web 페이지는
	http://www.sun-inet.or.jp/~yaneurao/
입니다.
